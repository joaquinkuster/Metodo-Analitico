# Generated by Django 5.2 on 2025-06-17 22:44

import NumerosPseudoaleatorios.models
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Camion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('capacidad_vacas', models.PositiveIntegerField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 1000, 'La capacidad del camión debe ser entre 1 y 1000 vacas.')])),
                ('costo_chofer_km', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(0.1, 10000, 'El costo del chofer por km debe estar entre $0.1 y $10.000.')])),
                ('consumo_lt_km', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(0.1, 200, 'El consumo de combustible debe estar entre 0.1 y 200 L/100km.')])),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='TesterBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('CC', 'Chi-Cuadrado'), ('PK', 'Poker')], max_length=2)),
                ('significancia', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1e-05, 0.99999, 'La significancia debe ser un número entre 0 y 1.')])),
                ('frecuencias_observadas', models.JSONField(default=list)),
                ('frecuencias_esperadas', models.JSONField(default=list)),
                ('diferencia', models.JSONField(default=list)),
                ('diferencia_cuadrado', models.JSONField(default=list)),
                ('diferencia_cuadrado_fe', models.JSONField(default=list)),
                ('estadistico_prueba', models.FloatField(editable=False)),
                ('grados_libertad', models.PositiveIntegerField(editable=False)),
                ('valor_critico', models.FloatField(editable=False)),
                ('aprobado', models.BooleanField(editable=False)),
                ('pvalor', models.FloatField(editable=False)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='SecuenciaBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('CM', 'Congruencial Multiplicativo'), ('VN', 'Von Neumann')], max_length=2)),
                ('semilla', models.PositiveIntegerField()),
                ('cantidad', models.PositiveIntegerField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 10000, 'La cantidad debe ser mayor a 0 y menor o igual a 1.000.')])),
                ('limite_inferior', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 100000, 'El límite inferior debe estar entre 1 y 2000.')])),
                ('limite_superior', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 100000, 'El límite superior debe estar entre 1 y 2000.')])),
                ('numeros', models.JSONField(default=list)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='DistribucionBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo', models.CharField(choices=[('BI', 'Binomial'), ('EXP', 'Exponencial'), ('TR', 'Triangular')], max_length=3)),
                ('variable_aleatoria', models.JSONField(default=list)),
                ('probabilidades', models.JSONField(default=list)),
                ('acumuladas', models.JSONField(default=list)),
                ('variable_aleatoria_sim', models.JSONField(default=list)),
                ('probabilidades_sim', models.JSONField(default=list)),
                ('acumuladas_sim', models.JSONField(default=list)),
                ('esperanza', models.FloatField(editable=False)),
                ('varianza', models.FloatField(editable=False)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('secuencia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='distribuciones', to='NumerosPseudoaleatorios.secuenciabase', validators=[NumerosPseudoaleatorios.models.validar_aleatoriedad])),
            ],
            options={
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='ChiCuadrado',
            fields=[
                ('testerbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.testerbase')),
                ('intervalos', models.JSONField(default=list)),
                ('cantidad_intervalos', models.PositiveIntegerField(editable=False)),
            ],
            bases=('NumerosPseudoaleatorios.testerbase',),
        ),
        migrations.CreateModel(
            name='Poker',
            fields=[
                ('testerbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.testerbase')),
            ],
            bases=('NumerosPseudoaleatorios.testerbase',),
        ),
        migrations.CreateModel(
            name='CongruencialMultiplicativo',
            fields=[
                ('secuenciabase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.secuenciabase')),
                ('t', models.PositiveIntegerField()),
                ('p', models.PositiveIntegerField()),
                ('modulo', models.PositiveIntegerField()),
                ('multiplicador', models.BigIntegerField(editable=False)),
            ],
            bases=('NumerosPseudoaleatorios.secuenciabase',),
        ),
        migrations.CreateModel(
            name='VonNeumann',
            fields=[
                ('secuenciabase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.secuenciabase')),
            ],
            bases=('NumerosPseudoaleatorios.secuenciabase',),
        ),
        migrations.AddField(
            model_name='testerbase',
            name='secuencia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tests', to='NumerosPseudoaleatorios.secuenciabase'),
        ),
        migrations.CreateModel(
            name='Continua',
            fields=[
                ('distribucionbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.distribucionbase')),
                ('intervalos', models.JSONField(default=list)),
                ('marcas_de_clase', models.JSONField(default=list)),
                ('intervalos_sim', models.JSONField(default=list)),
                ('marcas_de_clase_sim', models.JSONField(default=list)),
            ],
            bases=('NumerosPseudoaleatorios.distribucionbase',),
        ),
        migrations.CreateModel(
            name='Discreta',
            fields=[
                ('distribucionbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.distribucionbase')),
            ],
            bases=('NumerosPseudoaleatorios.distribucionbase',),
        ),
        migrations.CreateModel(
            name='Simulacion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('distancia', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(0.1, 100000, 'La distancia debe ser entre 0.1 y 100.000 km.')])),
                ('precio_combustible', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(0.01, 100000, 'El precio del combustible debe ser entre $0.01 y $100.000.')])),
                ('porcentaje_ganancia', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(0.01, 100.0, 'El porcentaje de ganancia debe estar entre 0.01% y 100%.')])),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('peso_total', models.FloatField(editable=False)),
                ('camion_ideal', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='simulaciones', to='NumerosPseudoaleatorios.camion')),
            ],
            options={
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='SimulacionCamion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad_viajes', models.IntegerField(default=0, editable=False)),
                ('costo_combustible', models.FloatField(default=0, editable=False)),
                ('costo_choferes', models.FloatField(default=0, editable=False)),
                ('costo_traslado', models.FloatField(default=0, editable=False)),
                ('precio_por_kg', models.FloatField(default=0, editable=False)),
                ('camion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NumerosPseudoaleatorios.camion')),
                ('simulacion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NumerosPseudoaleatorios.simulacion')),
            ],
        ),
        migrations.AddField(
            model_name='simulacion',
            name='camiones',
            field=models.ManyToManyField(related_name='simulaciones_camiones', through='NumerosPseudoaleatorios.SimulacionCamion', to='NumerosPseudoaleatorios.camion'),
        ),
        migrations.CreateModel(
            name='Exponencial',
            fields=[
                ('continua_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.continua')),
                ('tasa', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorMinimo(1e-05, 'La tasa λ debe ser mayor que 0.')])),
            ],
            bases=('NumerosPseudoaleatorios.continua',),
        ),
        migrations.CreateModel(
            name='Triangular',
            fields=[
                ('continua_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.continua')),
                ('a', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 2000, 'El peso mínimo debe estar entre 1 y 2000 kg.')])),
                ('b', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 2000, 'El peso máximo debe estar entre 1 y 2000 kg.')])),
                ('c', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1, 2000, 'El peso moda debe estar entre 1 y 2000 kg.')])),
            ],
            bases=('NumerosPseudoaleatorios.continua',),
        ),
        migrations.CreateModel(
            name='Binomial',
            fields=[
                ('discreta_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='NumerosPseudoaleatorios.discreta')),
                ('p', models.FloatField(validators=[NumerosPseudoaleatorios.models.ValidadorRango(1e-05, 0.99999, 'La probabilidad p debe estar entre 0 y 1.')])),
                ('n', models.PositiveIntegerField(validators=[NumerosPseudoaleatorios.models.ValidadorMinimo(1, 'El número de ensayos n debe ser al menos 1.')])),
            ],
            bases=('NumerosPseudoaleatorios.discreta',),
        ),
        migrations.AddField(
            model_name='simulacion',
            name='triangular',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='NumerosPseudoaleatorios.triangular'),
        ),
    ]
